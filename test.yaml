# Gather facts
- hosts: hyperfoil
  ignore_unreachable: true
  tasks: []
- hosts: hyperfoil_controller
  tasks:
  - name: Start test
    include_role:
      name: hyperfoil.hyperfoil_test
    when: hyperfoil_deployer == "ssh"
    vars:
      test_name: test
- hosts: localhost
  connection: local
  tasks:
  - set_fact:
      num_apps: "{{ (num_dc | int) // 5 }}"
  - name: Check if oc is logged on
    shell: "oc whoami"
    register: "login_check_cmd"
  - name: Find workload nodes
    shell: "oc get node -l test.role=workload -o json | jq -r '.items[].metadata.name'"
    register: workload_cmd
  - name: Get workload pod count
    loop: "{{ workload_cmd.stdout.split() }}"
    shell: "oc get pod -n {{ namespace }} --field-selector=spec.nodeName={{item}},status.phase=Running -o json | jq '.items | length'"
    register: workload_counts
  - name: Calculate pod count difference
    set_fact:
      min_pods: "{{ workload_counts.results | map(attribute='stdout') | list | min }}"
      max_pods: "{{ workload_counts.results | map(attribute='stdout') | list | max }}"
      total_pods: "{{ workload_counts.results | map(attribute='stdout') | list | map('int') | sum }}"
  - name: Test total number of pods
    when: "(total_pods | int) != (num_dc | int) * (pods_per_dc | int)"
    fail:
      msg: "Incorrect number of pods: expected {{ (num_dc | int) * (pods_per_dc | int) }} found {{ total_pods }}"
  - name: Test difference
    when: "(max_pods | int) - (min_pods | int) > 1"
    fail:
      msg: "Unbalanced pods: min = {{ min_pods }}, max = {{ max_pods }} "
  - name: Make sure all services are reachable
    shell: ./check-services.sh {{ wildcard_domain }} {{ num_apps }}
    register: services_result
    until: services_result.rc == 0
    retries: 10
    delay: 10
  - when: target == 'routers'
    block:
    - name: Find routers
      command: "oc get po -n openshift-ingress -o jsonpath='{.items[*].status.hostIP}'"
      register: router_cmd
    - name: Get number of ingress gateways
      when: use_istio | bool
      shell: "oc get po -n {{ control_plane }} -l istio=ingressgateway -o json | jq '.items | length'"
      register: gateway_cmd
    - name: Set routers
      set_fact:
        endpoints: "{{ router_cmd.stdout.split() }}"
        num_routers: "{{ router_cmd.stdout.split() | length }}"
        endpoint_port: 443
        num_gateways: "{{ gateway_cmd.stdout if use_istio | bool else 0}}"
      failed_when: num_routers != expected_routers or num_gateways != expected_gateways
  - when: target == 'gateways'
    block:
    - name: Get ingress gateways
      shell: "oc get po -n {{ control_plane }} -l istio=ingressgateway -o jsonpath='{.items[*].status.podIP}'"
      register: gateway_cmd
    - set_fact:
        endpoints: "{{ gateway_cmd.stdout.split() }}"
        num_gateways: "{{ gateway_cmd.stdout.split() | length }}"
        num_routers: 0
        endpoint_port: 8443
      failed_when: num_gateways != expected_gateways
  - when: target == 'services'
    block:
    - name: Find services
      command: "oc get svc -n {{ namespace }} -o jsonpath='{.items[*].spec.clusterIP}'"
      register: svc_cmd
    - name: Set endpoints
      set_fact:
        endpoints: "{{ svc_cmd.stdout.split() }}"
        num_routers: 0
        num_gateways: 0
        endpoint_port: 8443
      failed_when: (endpoints | length) == 0
  - name: Get number of virtual services
    shell: "oc get vs -n {{ namespace }} -o json | jq '.items | length'"
    register: virtualservices
  - name: Get ingressgateway names
    when: use_istio | bool
    shell: "oc get po -n {{ control_plane }} -l istio=ingressgateway -o name --no-headers | cut -f 2 -d '/'"
    register: gateway_pods
  - name: Create additional namespaces
    shell: "./set_number_of_namespaces.sh {{ num_namespaces }} 0"
    register: create_namespaces
  - name: Get workload pod names
    shell: "oc get po -n {{ namespace }} -l app=scale-test -o name --no-headers | cut -f 2 -d '/'"
    register: workload_pods
  - name: Reset counters
    when: (use_istio | bool) and (record_envoy_stats | bool)
    loop: "{{ gateway_pods.stdout.split() | product([ control_plane ]) | list + workload_pods.stdout.split() | product([ namespace ]) | list }}"
    shell: "oc exec -n {{ item[1] }} -c istio-proxy {{ item[0] }} -- curl -s localhost:15000/reset_counters -X POST"
    async: 60
    poll: 0
    register: stats_reset
  - name: Wait for the info
    when: (use_istio | bool) and (record_envoy_stats | bool)
    loop: "{{ stats_reset.results }}"
    async_status:
      jid: "{{ item.ansible_job_id }}"
  - name: Start test
    include_role:
      name: hyperfoil.hyperfoil_test
    when: hyperfoil_deployer == "k8s"
    vars:
#      run_description: "{{ namespace }}%20R%3D{{ num_routers }}%20G%3D{{ num_gateways }}%20P%3D{{ total_pods }}%20VS%3D{{ virtualservices.stdout }}"
      run_description: "sm2.1%20G%3D{{ num_gateways }}%20P%3D{{ total_pods }}%20N%3D{{ num_namespaces }}%20{{ fork }}%20{{ (http2 == 'true') | ternary('http2', 'http1.1') }}"
  - name: Capture info after test
    when: (use_istio | bool) and (record_envoy_stats | bool)
    include_tasks: capture-envoy-info.yaml
    vars:
      dest: "/tmp/envoy_{{test_runid}}_r{{ num_routers }}_g{{ num_gateways }}_d{{ num_dc }}.zip"
  - name: Show run ID
    debug:
      msg: "Run ID was {{ test_runid }}"
  - name: Fetch Hyperfoil stats
    shell: "curl -s -k {{ hyperfoil_controller_protocol }}://{{ hyperfoil_controller_host }}:{{ hyperfoil_controller_port}}/run/{{ test_runid }}/stats/all -H 'accept: application/json' > /tmp/hf_{{ test_runid }}_r{{ num_routers }}_g{{ num_gateways }}_n{{ num_namespaces }}_d{{ num_dc }}.json"
