name: closedmodel
agents:
  default:
    extras: -XX:+UseShenandoahGC
    # -XX:StartFlightRecording=delay=30s,duration=150s,disk=true,filename=/tmp/recording.jfr,settings=profile
    #stop: false
{% for agent in groups[hyperfoil_agent_group] %}
{%   if hyperfoil_deployer == "k8s" %}
  {{ agent }}:
    node: {{ agent }}
{%   else %}
  {{ agent }}: {{ hostvars[agent]['ansible_host'] }}:{{ hyperfoil_agent_port }}
{%   endif %}
{% endfor %}
threads: 50
http:
{% for index in range(1, (num_apps | int) + 1) %}
- host: https://app-{{ index }}.{{ wildcard_domain }}
  allowHttp2: {{ http2 }}
{% if (endpoints | length) > 0 %}
  addresses:
{%   for endpoint in endpoints %}
  - {{ endpoint }}:{{ endpoint_port }}
{%   endfor %}
{% endif %}
  sharedConnections: {{ (test_shared_connections | default(100, true)) // (num_apps | int) }}
{% endfor %}
phases:
- warmup:
    always:
      isWarmup: true
      users: {{ test_concurrent_users }}
      duration: {{ test_rampup_duration }}
      forks:
        simple: &simple
          weight: {{ (fork == "simple" or fork == "all") | ternary(1, 0) }}
          scenario:
          - params: &params
            # - randomInt:
            #     toVar: p
            #     min: 200
            #     max: 300
            - set: p <- 1
            - randomInt:
                toVar: hostIndex
                min: 1
                max: {{ num_apps }}
            - randomItem:
                list:
                  stable: 0.8
                  canary: 0.2
                  #mirror: 0.1
                toVar: variant
          - test:
            - httpRequest:
                GET: /mersennePrime?p=${p}
                authority: app-${hostIndex}.{{ wildcard_domain }}
                headers:
                  x-variant:
                    fromVar: variant
                sla:
                  errorRatio: 0.1
                #metric:
                # - ([^.]*)\..* -> $1
                # handler:
                #   header:
                #   - recordHeaderTime:
                #       header: x-envoy-upstream-service-time
                #       metric: simple-upstream
                #       unit: ms
        proxy: &proxy
          weight: {{ (fork == "proxy" or fork == "all") | ternary(1, 0) }}
          scenario:
          - params: *params
          - test:
            - httpRequest:
                GET: /proxy?p=${p}&url=http://app-${hostIndex}:8080/mersennePrime?p=${p}
                authority: app-${hostIndex}.{{ wildcard_domain }}
                headers:
                  x-variant:
                    fromVar: variant
                sla:
                  errorRatio: 0.1
                #metric:
                #- ([^.]*)\..* -> $1
                # handler:
                #   header:
                #   - recordHeaderTime:
                #       header: x-envoy-upstream-service-time
                #       metric: proxy-upstream
                #       unit: ms
                #   - recordHeaderTime:
                #       header: x-proxy-service-time
                #       metric: proxy-downstream
        db: &db
          weight: {{ (fork == "db" or fork == "all") | ternary(1, 0) }}
          scenario:
          - params: *params
          - test:
            - randomInt:
                toVar: size
                min: 5
                max: 20
            - httpRequest:
                GET: /db?p=${p}&host=app-${hostIndex}&size=${size}
                authority: app-${hostIndex}.{{ wildcard_domain }}
                headers:
                  x-variant:
                    fromVar: variant
                sla:
                  errorRatio: 0.1
                #metric:
                #- ([^.]*)\..* -> $1
                # handler:
                #   header:
                #   - recordHeaderTime:
                #       header: x-envoy-upstream-service-time
                #       metric: db-upstream
                #       unit: ms
                #   - recordHeaderTime:
                #       header: x-db-service-time
                #       metric: db-downstream
- steady:
    always:
      users: {{ test_concurrent_users }}
      duration: {{ test_steady_duration }}
      startAfter: warmup
      forks:
        simple: *simple
        proxy: *proxy
        db: *db