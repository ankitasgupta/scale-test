apiVersion: v1
kind: List
items:
{% for index in range(1, (num_dc | int) + 1) %}
{%   if index % 5 == 1 %}
{%     set app_variant = "canary" %}
{%   else %}
{%     set app_variant = "stable" %}
{%   endif %}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: scale-test
      version: "1.0"
    name: app-{{ index }}
    namespace: {{ namespace }}
  spec:
    replicas: {{ pods_per_dc }}
    selector:
      matchLabels:
        app: scale-test
        deploymentconfig: app-{{ index }}
        app.index: application-{{ (index + 4) // 5 }}
        app.variant:  {{ app_variant }}
        # Kiali would complain if there were no version label
        version: "1.0"
    strategy:
      type: Recreate
    template:
      metadata:
# Automatic injection will be disabled by default, we selectively enable that for app pods.
# Otherwise, in Openshift even the builder and deployer pods would get the sidecar injected.
# Alternative solution: https://bani.com.br/2018/09/istio-sidecar-injection-enabling-automatic-injection-adding-exceptions-and-debugging/
        annotations:
          sidecar.istio.io/inject: "true"
          sidecar.istio.io/statsInclusionPrefixes: listener,cluster.outbound
          sidecar.istio.io/proxyCPU: {{ proxy_cpu | default("100m",true) }}
          sidecar.istio.io/proxyCPULimit: "1000m"
          sidecar.istio.io/concurrency: "1"
        labels:
          app: scale-test
          deploymentconfig: app-{{ index }}
          app.index: application-{{ (index + 4) // 5 }}
          app.variant:  {{ app_variant }}
          # Kiali would complain if there were no version label
          version: "1.0"
      spec:
        nodeSelector:
{% if backend_node is defined %}
          kubernetes.io/hostname: {{ backend_node }}
{% elif single_node is not defined %}
          test.role: workload
{% endif %}
{% if single_node is not defined %}
        topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: workload
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: scale-test
{% endif %}
        tolerations:
        - key: workload
          operator: Exists
          effect: NoExecute
        containers:
{% if backend_type == "java-Z" %}
        - image: quay.io/cfilleke/mannequin:0.0-z
{% endif %}
{% if backend_type == "java" %}
        - image: quay.io/cfilleke/mannequin:0.0-z
{% endif %}
{% if backend_type == "native" %}
        - image: quay.io/rvansa/mannequin:native
{% endif %}
          imagePullPolicy: Always
          name: mannequin
{% if backend_type is not defined or backend_type == "java" %}
          image: quay.io/rvansa/mannequin:jvm-latest
          command:
          - java
          - -Dquarkus.vertx.event-loops-pool-size=1
          - -Dquarkus.vertx.internal-blocking-pool-size=1
          - -Dquarkus.vertx.worker-pool-size=1
          - -Dquarkus.http.io-threads=1
          - -Dquarkus.thread-pool.core-threads=1
          - -Dquarkus.http.ssl.certificate.file=/var/certs/tls.crt
          - -Dquarkus.http.ssl.certificate.key-file=/var/certs/tls.key
          - -jar
          - /deployments/app.jar
{% elif backend_type == "native" %}
          image: quay.io/rvansa/mannequin:native
          args:
          - -Dquarkus.vertx.event-loops-pool-size=1
          - -Dquarkus.vertx.internal-blocking-pool-size=1
          - -Dquarkus.vertx.worker-pool-size=1
          - -Dquarkus.http.io-threads=1
          - -Dquarkus.thread-pool.core-threads=1
          - -Dquarkus.http.ssl.certificate.file=/var/certs/tls.crt
          - -Dquarkus.http.ssl.certificate.key-file=/var/certs/tls.key
{% endif %}
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: VARIANT
            value: {{ app_variant }}
          - name: JAVA_OPTIONS
            value: >
              -Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            exec:
              command:
                - curl
                - localhost:8080/
              initialDelaySeconds: 5
          resources:
{% if backend_cpu is defined %}
            requests:
              cpu: "{{ backend_cpu }}"
{% endif %}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - name: certs
            mountPath: /var/certs
        volumes:
        - name: certs
          secret:
            secretName: app-{{ (index + 4) // 5 }}
    triggers:
    - type: ConfigChange
{% endfor %}
